#!/bin/bash

# Daemon to allow IPv6 client already authenticated with CoovaChilli via IPv4
# to have access to internet.

# Copyright (C) 2016 Ratchanan Srirattanamet
#
# This program is free software: you can redistribute it and/or modify
# It under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e
[ "$DEBUG" = "x" ] && set -x

DELAY=5

ORIG_IFS="$IFS"

debug () {
	if [ "$DEBUG" != "" ]; then
		echo "$1" >&2
	fi
}

usage () {
	echo "Usage: $0 {LAN_IF}"
}

cleanup () {
	IFS=$'\n'
	for RULE in ${UNDO_RULES}; do
		debug "Undo $RULE"
		IFS="$ORIG_IFS"
		ip6tables $RULE # Intentionally not quote
		IFS=$'\n'
	done
	IFS="$ORIG_IFS"
}

trap_err () {
	local RC="$?"

	echo "Unexpected error happens! Cleanning up" >&2
	debug "The return code is: $RC"
}

trap trap_err ERR
trap "cleanup; exit" EXIT

ip6t () {
	opt=$1; shift

	UNDO_RULES+=$'\n'"-D $*"

	debug "ip6t: Rule $opt $*"
	ip6tables $opt $*
}

undo_rules_for_mac () {
	RULES_FOR_CLIENT=$(echo "$UNDO_RULES"|grep "$1") || return 0 #no rule
	IFS=$'\n'
	for RULE in $RULES_FOR_CLIENT; do
		IFS="$ORIG_IFS"
		debug "Undo $RULE"
		ip6tables $RULE # Intentionally not quote
		IFS=$'\n'
	done
	IFS="$ORIG_IFS"

	UNDO_RULES=$(echo "$UNDO_RULES"|grep -v "$1")
}

comply_for_mac () {
	local CLIENT_MAC="$1"
	local STATUS="$2"

	undo_rules_for_mac "$CLIENT_MAC"
	case "$STATUS" in
		pass)
			debug "Allowing $CLIENT_MAC"
			ip6t -I FORWARD -i "$LAN_IF" -m mac --mac-source "$CLIENT_MAC" -j ACCEPT
			;;
		dnat|splash)
			debug "DNAT $CLIENT_MAC (not implemented)"
			# TODO
			;;
		*)
			debug "Droping $CLIENT_MAC"
			# ... by default rule!
			;;
	esac
}

if [ "$1" = "" ]; then
	usage; exit
fi

LAN_IF="$1"

CHILLI_SOCK=/var/run/chilli."$LAN_IF".sock
while ! [ -S "$CHILLI_SOCK" ]; do
	echo "CoovaChilli socket for ${LAN_IF} can't be found." >&2
	echo "Waiting $DELAY seconds..." >&2
	sleep "$DELAY"
done

STATE=""
OLD_STATE=""

UNDO_RULES=""

# Setting rules to block all clients by default. Note that we don't use
# default policy because there might be other interfaces that need to
# forward packets.
# TODO: what about DNAT?
ip6t -A FORWARD -i "$LAN_IF" -j DROP

while true; do
	debug "$(LC_ALL=C date)"

	# Get state of IPV4 clients currently connected via CoovaChilli
	STATE=$(chilli_query -s "$CHILLI_SOCK" list|awk '{
		mac = $1
		gsub(/-/, ":", mac)

		if ($2 ~ /[0-9]/)
			print mac " " $3
		else
			print mac " " $2
	}'|sort)

	debug "IPv4 clients state:"$'\n'"${STATE}"$'\n'

	# Deals with IPv4 users that has disappeared from system
	DISAPPERED_MAC=$(comm -23 <(echo "$OLD_STATE"|cut -f1 -d' ') \
				  <(echo "$STATE"|cut -f1 -d' ') )

	for CLIENT_MAC in $DISAPPERED_MAC; do
		debug "$CLIENT_MAC has disappeared"
		undo_rules_for_mac "$CLIENT_MAC"
	done

	# Deal with changes in STATE
	DIFF_STATE=$(comm -13 <(echo "$OLD_STATE") \
			      <(echo "$STATE") )
	IFS=$'\n'
	for USER in $DIFF_STATE; do
		IFS="$ORIG_IFS"

		CLIENT_MAC=$(echo "$USER"|cut -f1 -d' ')
		STATUS=$(echo "$USER"|cut -f2 -d' ')

		debug "$CLIENT_MAC appeared/changed its state to $STATUS"
		comply_for_mac "$CLIENT_MAC" "$STATUS"

		IFS=$'\n'
	done
	IFS="$ORIG_IFS"

	debug "================================"

	OLD_STATE="$STATE"

	sleep "$DELAY"
done
